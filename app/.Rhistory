opacity = 1,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
fillOpacity = 0.5,
color = "blue",
opacity = 1,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0,
color = "black",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0,
color = "blue",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0,
color = "blue",
fillColor = "blue",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "blue",
fillColor = "blue",
opacity = 1.0,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
color = "blue",
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.7,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
weight = 3,
fillOpacity = 0.7,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name)) %>%
setMaxBounds(lng1 = -87.94011,
lat1 = 41.64454,
lng2 = -87.52414,
lat2 = 42.02304 )
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.7,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name)) %>%
setMaxBounds(lng1 = -87.94011,
lat1 = 41.64454,
lng2 = -87.52414,
lat2 = 42.02304 )
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.7,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
library(rgdal)
countries <- readOGR("data/countries.geo.json")
leaflet(countries) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
runApp()
library(rgdal)
countries <- readOGR("data/countries.geo.json")
leaflet(countries) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addProviderTiles(options = providerTileOptions(noWrap = TRUE)
) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(countries) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
runApp()
runApp()
countries <- readOGR("data/countries.geo.json")
leaflet(countries) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)) %>%
addTiles() %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
input$map_marker_click
runApp()
p
runApp()
library(sf)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(dplyr)
library(leaflet)
library(rgdal)
countries <- readOGR("data/countries.geo.json")
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/tec005m/mds/Visualizacion/Visualizacion_Dayana_Quimbayo/Shiny_Peliculas_final.R')
runApp()
runApp()
runApp()
runApp()
runApp()
artists <- read.csv(file = './data/artists.csv')
head(artists)
top_ten %>%
ggplot(aes(x = name, y = listeners, fill=listeners)) +
geom_bar(stat="identity") %>%
coord_flip()
top_ten <-artists %>%
arrange(desc(listeners)) %>%
top_n(20)
top_ten %>%
ggplot(aes(x = name, y = listeners, fill=listeners)) +
geom_bar(stat="identity") %>%
coord_flip()
View(artists)
View(artists)
top_ten <-artists %>%
arrange(desc(listeners)) %>%
top_n(20)
View(top_ten)
View(top_ten)
library(ggplot2)
library(dplyr)
library(leaflet)
artists <- read.csv(file = './data/artists.csv')
head(artists)
top_ten <-artists %>%
arrange(desc(listeners)) %>%
top_n(20)
top_ten %>%
ggplot(aes(x = name, y = listeners)) +
geom_bar(stat="identity") %>%
coord_flip()
View(top_ten)
View(top_ten)
View(top_ten)
View(top_ten)
top_ten %>%
ggplot(aes(x = name, y = listeners)) +
geom_bar(stat="identity")
top_ten %>%
ggplot(aes(x = name, y = listeners)) +
geom_bar(stat="identity") +
coord_flip()
top_ten %>%
ggplot(aes(x = name, y = listeners, fill)) +
geom_bar(stat="identity", fill = "#FF6666") +
coord_flip()
top_ten %>%
ggplot(aes(x = name, y = listeners, fill)) +
geom_bar(stat="identity", fill = "#B90000") +
coord_flip()
library(ggthemes)
top_ten %>%
ggplot(aes(x = name, y = listeners, fill)) +
geom_bar(stat="identity", fill = "#B90000") +
coord_flip() +
theme_calc()
top_ten %>%
ggplot(aes(x = name, y = listeners, fill)) +
geom_bar(stat="identity", fill = "#B90000") +
coord_flip() +
theme_few()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
icon()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(countries)
View(countries)
geojson <- readOGR("data/countries.geo.json")
leaflet() %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson)
leaflet() %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson) %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
source('C:/Users/tec005m/mds/Visualizacion/visualization/app/testing_graphics.R', echo=TRUE)
leaflet(geojson) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
leaflet(geojson) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%
addPolygons(color = "transparent", fillOpacity = 1,
highlight = highlightOptions(
weight = 3,
fillOpacity = 0.5,
fillColor = "blue",
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
label = ~paste0(name))
runApp()
runApp()
library(sp)
library(rworldmap)
install.packages("rworldmap")
library(sp)
library(rworldmap)
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
coords2country = function(points)
{
countriesSP <- getMap(resolution='low')
#countriesSP <- getMap(resolution='high') #you could use high res map from rworldxtra if you were concerned about detail
# convert our list of points to a SpatialPoints object
# pointsSP = SpatialPoints(points, proj4string=CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
#setting CRS directly to that from rworldmap
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
indices$ADMIN
#indices$ISO3 # returns the ISO3 code
#indices$continent   # returns the continent (6 continent model)
#indices$REGION   # returns the continent (7 continent model)
}
runApp()
runApp()
points = data.frame(lon=c(), lat=c(51.5, 50, 48.5, 47, 44.5))
p
p
class(p)
d <- data.frame(lon=c(101.25), lat=c(65.36684))
d
coords2country(d)
a <- coords2country(d)
a
class(a)
print(a)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
top_artists <- read.csv(file='./data/top_artists_per_country.csv')
View(top_artists)
View(top_artists)
runApp()
top_artists <- read.csv(file='./data/top_artists_per_country.csv')
default_country <-'Spain'
top_artists %>%
filter(country, default_country) %>%
ggplot(aes(x = name, y = listeners)) +
geom_bar(stat="identity",  fill = "#B90000") +
coord_flip()+
theme_few()
top_artists %>%
filter(country == default_country) %>%
ggplot(aes(x = name, y = listeners)) +
geom_bar(stat="identity",  fill = "#B90000") +
coord_flip()+
theme_few()
View(top_artists)
View(top_artists)
View(top_artists)
View(top_artists)
top_artists <- read.csv(file='./data/top_artists_per_country.csv')
colnames(top_artists) <- c('country', 'code', 'artist', 'rank')
default_country <-'Spain'
top_artists %>%
filter(country == default_country) %>%
arrange(rank) %>%
ggplot(aes(x = name, y = listeners)) +
geom_bar(stat="identity",  fill = "#B90000") +
coord_flip()+
theme_few()
top_artists <- read.csv(file='./data/top_artists_per_country.csv')
default_country <-'Spain'
View(top_artists)
View(top_artists)
top_artists %>%
filter(country == default_country) %>%
arrange(rank) %>%
ggplot(aes(x = artist, y = listeners)) +
geom_bar(stat="identity",  fill = "#B90000") +
coord_flip()+
theme_few()
a <- top_artists %>%
filter(country == default_country) %>%
arrange(rank)
View(a)
View(a)
source('C:/Users/tec005m/mds/Visualizacion/visualization/app/testing_graphics.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(top_artists)
View(top_artists)
top_artists_country %>%
filter(country == default_country) %>%
arrange(rank) %>%
ggplot(aes(x = artist, y = listeners)) +
geom_bar(stat="identity",  fill = "#B90000") +
coord_flip()+
theme_few()
View(a)
View(a)
runApp()
tracks <- read.csv(file = './data/tracks.csv')
